import java.io.PrintStream;
import java.util.*;

public class Main {

    public static Scanner sc = new Scanner(System.in);
    public static PrintStream out = System.out;

    public static void zm(int n, int m) {
        int nm[][] = new int[n][m], l = 1, h = n, k = m, p = 0;
        for (int i = 0; i < m; i++) {
            if (i % 2 == 0)
                for (int j = 0; j < n; j++) {
                    nm[j][i] = l;
                    l++;
                }
            else
                for (int j = n - 1; j >= 0; j--) {
                    nm[j][i] = l;
                    l++;
                }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                out.print(nm[i][j] + "\t");
            }
            out.println();
        }
    }

    public static void sp(int n, int m) {
        int nm[][] = new int[n][m], l = 1, h = n, k = m, p = 0;
        if (n % 2 == 1 && m % 2 == 1) {
            if (n == m) {
                while (n != h / 2 && m != k / 2 + 1) {
                    for (int i = p; i < m; i++) {
                        nm[p][i] = l;
                        l++;
                    }
                    for (int i = p + 1; i < n; i++) {
                        nm[i][m - 1] = l;
                        l++;
                    }
                    for (int i = m - 2; i >= 1 + p; i--) {
                        nm[n - 1][i] = l;
                        l++;
                    }
                    for (int i = n - 1; i >= 1 + p; i--) {
                        nm[i][p] = l;
                        l++;
                    }
                    n -= 1;
                    m -= 1;
                    p++;
                }
                nm[p][m - 1] = l;
            } else if (n > m) {
                while (n != h / 2 && m != k / 2 + 1) {
                    for (int i = p; i < m; i++) {
                        nm[p][i] = l;
                        l++;
                    }
                    for (int i = p + 1; i < n; i++) {
                        nm[i][m - 1] = l;
                        l++;
                    }
                    for (int i = m - 2; i >= 1 + p; i--) {
                        nm[n - 1][i] = l;
                        l++;
                    }
                    for (int i = n - 1; i >= 1 + p; i--) {
                        nm[i][p] = l;
                        l++;
                    }
                    n -= 1;
                    m -= 1;
                    p++;
                }
                for (int i = p; i < n; i++) {
                    nm[i][m - 1] = l;
                    l++;
                }
            } else {
                while (n != h / 2 && m != k / 2 + 1 + (k - h) / 2) {
                    for (int i = p; i < m; i++) {
                        nm[p][i] = l;
                        l++;
                    }
                    for (int i = p + 1; i < n; i++) {
                        nm[i][m - 1] = l;
                        l++;
                    }
                    for (int i = m - 2; i >= 1 + p; i--) {
                        nm[n - 1][i] = l;
                        l++;
                    }
                    for (int i = n - 1; i >= 1 + p; i--) {
                        nm[i][p] = l;
                        l++;
                    }
                    n -= 1;
                    m -= 1;
                    p++;
                }
                for (int i = p; i < m; i++) {
                    nm[p][i] = l;
                    l++;
                }
            }
        } else {
            while (n != h / 2 && m != k / 2) {
                for (int i = p; i < m; i++) {
                    nm[p][i] = l;
                    l++;
                }
                for (int i = p + 1; i < n; i++) {
                    nm[i][m - 1] = l;
                    l++;
                }
                for (int i = m - 2; i >= 1 + p; i--) {
                    nm[n - 1][i] = l;
                    l++;
                }
                for (int i = n - 1; i >= 1 + p; i--) {
                    nm[i][p] = l;
                    l++;
                }
                n -= 1;
                m -= 1;
                p++;
            }
        }
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < k; j++) {
                out.print(nm[i][j] + "\t");
            }
            out.println();
        }
        out.println("\n");
    }

    //«мейка и спираль готовы, третий способ в процессе
    public static void main(String[] args) {
        int n = sc.nextInt(), m = sc.nextInt();
        zm(n, m);
        out.println();
        out.println();
        sp(n, m);
    }
}